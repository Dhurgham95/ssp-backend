// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.AskBank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumberRequestInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNumberRelatedToAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberRelatedToAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestAnswerDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestInfoDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AskBanks");
                });

            modelBuilder.Entity("Backend.Models.Bill", b =>
                {
                    b.Property<string>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankProfit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Bill1IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Bill2IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Bill3IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Bill4IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Bill5IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Bill6IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillDoc1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDoc2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDoc3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDoc4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDoc5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDoc6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillSeq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAcctNumForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAddressForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CustomerBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNameForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumberForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DirectiveManagerApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DirectiveManagerApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectiveManagerApprovalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DirectiveManagerApprovalNoteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DirectiveManagerNotification")
                        .HasColumnType("bit");

                    b.Property<string>("DirectiveManagerRejectionNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DirectiveManagerRejectionNoteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndPayDateForBill")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FCNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstAuditFromCompanyEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FirstAuditFromCompanyEmployeeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InsuranceComapnyNotification")
                        .HasColumnType("bit");

                    b.Property<string>("InsurancePay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInsured")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsInsuredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOnTmweelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantAcctNumForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantBussinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantNameForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantPay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthlyPayAmt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteForInsuranceRejection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteForInsuranceRejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteForOperationRejection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteForOperationRejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteForRejection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteForRejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteOneDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteThreeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteTwoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationNoteForOperations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OperationNoteForOperationsDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OperationsNotification")
                        .HasColumnType("bit");

                    b.Property<string>("PayCountForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SecondAuditFromCompanyEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SecondAuditFromCompanyEmployeeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SecondCompanyNotification")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartPayDateForBill")
                        .HasColumnType("datetime2");

                    b.Property<string>("TotalSalaryForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("billStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("billStatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Backend.Models.BillT", b =>
                {
                    b.Property<string>("BillTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Bill1IncertedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillDoc1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantAcctNumForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantNameForBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillTId");

                    b.HasIndex("UserId");

                    b.ToTable("BillTs");
                });

            modelBuilder.Entity("Backend.Models.Good", b =>
                {
                    b.Property<string>("GoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillSeq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAcctNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodDimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodQuentity")
                        .HasColumnType("int");

                    b.Property<int>("GoodSeq")
                        .HasColumnType("int");

                    b.Property<string>("GoodStore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantAcctNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SumPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("GoodId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Backend.Models.InsuranceDoc", b =>
                {
                    b.Property<string>("InsuranceDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Insurance1IncertedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Insurance2IncertedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Insurance3IncertedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InsuranceDoc1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceDoc2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceDoc3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthlyPay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayCount")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuranceDocId");

                    b.HasIndex("BillId")
                        .IsUnique()
                        .HasFilter("[BillId] IS NOT NULL");

                    b.ToTable("InsuranceDocs");
                });

            modelBuilder.Entity("Backend.Models.InsuranceTimeToPay", b =>
                {
                    b.Property<string>("InsuranceTimeToPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("YearOne")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YearThree")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YearTwo")
                        .HasColumnType("datetime2");

                    b.HasKey("InsuranceTimeToPayId");

                    b.HasIndex("BillId")
                        .IsUnique()
                        .HasFilter("[BillId] IS NOT NULL");

                    b.ToTable("InsuranceTimeToPays");
                });

            modelBuilder.Entity("Backend.Models.NotPayAlarm", b =>
                {
                    b.Property<string>("NotPayAlarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerAccNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotPay")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantAccoutNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantAcctNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantBussinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotPayAlarmId");

                    b.HasIndex("UserId");

                    b.ToTable("NotPayAlarms");
                });

            modelBuilder.Entity("Backend.Models.NotPayMonth", b =>
                {
                    b.Property<string>("NotPayMonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotPayAlarmId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotPayMonthId");

                    b.HasIndex("NotPayAlarmId");

                    b.ToTable("NotPayMonths");
                });

            modelBuilder.Entity("Backend.Models.PartialPay", b =>
                {
                    b.Property<long>("PartialPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillSeq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<double>("PartialPayAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PartialPayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartialPayStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartialPayId");

                    b.HasIndex("BillId");

                    b.ToTable("PartialPays");
                });

            modelBuilder.Entity("Backend.Models.PersonalAccount", b =>
                {
                    b.Property<int>("IdPa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PA")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccommodationTypePa")
                        .HasColumnName("AccommodationType_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNamberPa")
                        .HasColumnName("AccountNamber_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountOpeningDatePa")
                        .HasColumnName("AccountOpeningDate_PA")
                        .HasColumnType("date");

                    b.Property<string>("AccountTypePa")
                        .HasColumnName("AccountType_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityFoundationWorkPa")
                        .HasColumnName("ActivityFoundationWork_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowedToTakeTmweel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmlPa")
                        .HasColumnName("AML_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("AmountOfCreditFacilitiesPa")
                        .HasColumnName("AmountOfCreditFacilities_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnnualEstimatePa")
                        .HasColumnName("AnnualEstimate_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnotherCountryPa")
                        .HasColumnName("AnotherCountry_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnotherCurrencyPa")
                        .HasColumnName("AnotherCurrency_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("AnotherCustomerNamePa")
                        .HasColumnName("AnotherCustomerName_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchesPa")
                        .HasColumnName("Branches_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardSsatusPa")
                        .HasColumnName("CardSsatus_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckExtraIncomePa")
                        .HasColumnName("checkExtraIncome_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CommercialReturnsPa")
                        .HasColumnName("CommercialReturns_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CompanyNamePa")
                        .HasColumnName("CompanyName_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyOfFinancialReportsPa")
                        .HasColumnName("CopyOfFinancialReports_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyOfTheDocumentPa")
                        .HasColumnName("CopyOfTheDocument_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyOfTheHousingCardPa")
                        .HasColumnName("CopyOfTheHousingCard_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyOfThePassportPa")
                        .HasColumnName("CopyOfThePassport_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirthPa")
                        .HasColumnName("DateOfBirth_PA")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfIssuanceOfPassportPa")
                        .HasColumnName("DateOfIssuanceOfPassport_PA")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfRegulationPa")
                        .HasColumnName("DateOfRegulation_PA")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfTheDocumentPa")
                        .HasColumnName("DateOfTheDocument_PA")
                        .HasColumnType("date");

                    b.Property<string>("DatesOfTransactionsBanksPa")
                        .HasColumnName("DatesOfTransactionsBanks_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryDatePa")
                        .HasColumnName("DeliveryDate_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumberPa")
                        .HasColumnName("DocumentNumber_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypePa")
                        .HasColumnName("DocumentType_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevelPa")
                        .HasColumnName("EducationLevel_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPa")
                        .HasColumnName("Email_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnterprisePhoneNumberPa")
                        .HasColumnName("EnterprisePhoneNumber_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDateOfTheDocumentPa")
                        .HasColumnName("ExpiryDateOfTheDocument_PA")
                        .HasColumnType("date");

                    b.Property<string>("ExtraIncomePa")
                        .HasColumnName("ExtraIncome_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatcaRegulationsPa")
                        .HasColumnName("FatcaRegulations_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FinancialStatementsPa")
                        .HasColumnName("FinancialStatements_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAmountPa")
                        .HasColumnName("FirstAmount_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormOrganizerNamePa")
                        .HasColumnName("FormOrganizerName_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From10To25MillionPa")
                        .HasColumnName("From10To25Million_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("From1To5MillionPa")
                        .HasColumnName("From1To5Million_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("From6To10MillionPa")
                        .HasColumnName("From6To10Million_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FullNameArabPa")
                        .HasColumnName("FullNameArab_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEnglishPa")
                        .HasColumnName("FullNameEnglish_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovernmentTransactionsPa")
                        .HasColumnName("GovernmentTransactions_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAdressAnotherCountryPa")
                        .HasColumnName("HomeAdressAnotherCountry_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAdressPa")
                        .HasColumnName("HomeAdress_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdBrn")
                        .HasColumnName("ID_brn")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnName("id_user")
                        .HasColumnType("int");

                    b.Property<string>("InvestmentsPa")
                        .HasColumnName("Investments_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("IraqiDinarPa")
                        .HasColumnName("IraqiDinar_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsOnTmweelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerOfTheDocumentPa")
                        .HasColumnName("IssuerOfTheDocument_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuingAcheckBookPa")
                        .HasColumnName("IssuingAcheckBook_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuingThePassportPa")
                        .HasColumnName("IssuingThePassport_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitlePa")
                        .HasColumnName("JobTitle_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalStatusPa")
                        .HasColumnName("legalStatus_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessThan1MillionPa")
                        .HasColumnName("LessThan1Million_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("MonthlyEstimatePa")
                        .HasColumnName("MonthlyEstimate_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreThan25MillionPa")
                        .HasColumnName("MoreThan25Million_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("MotherNamePa")
                        .HasColumnName("MotherName_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfTheInstitutionOwnerPa")
                        .HasColumnName("NameOfTheInstitutionOwner_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOtherSourcesPa")
                        .HasColumnName("NameOtherSources_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalityOfTheInstitutionPa")
                        .HasColumnName("NationalityOfTheInstitution_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalityPa")
                        .HasColumnName("Nationality_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfExpectedBusinessPa")
                        .HasColumnName("NatureOfExpectedBusiness_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewInternetBankingPa")
                        .HasColumnName("NewInternetBanking_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NoteForGivenTmweel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotfatcaRegulationsPa")
                        .HasColumnName("NOTFatcaRegulations_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NotsPa")
                        .HasColumnName("Nots_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfChildrenPa")
                        .HasColumnName("NumberOfChildren_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfcheckBookPa")
                        .HasColumnName("NumberOfcheckBook_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone1Pa")
                        .HasColumnName("NumberPhone1_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone2Pa")
                        .HasColumnName("NumberPhone2_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OppositionPoliticianPa")
                        .HasColumnName("OppositionPolitician_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherNationalityPa")
                        .HasColumnName("OtherNationality_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSourcesPa")
                        .HasColumnName("OtherSources_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("OutInPa")
                        .HasColumnName("OutIN_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumberForOtherNationalityPa")
                        .HasColumnName("PassportNumberForOtherNationality_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumberPa")
                        .HasColumnName("PassportNumber_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalSavingsPa")
                        .HasColumnName("PersonalSavings_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneSomeoneWhoCanBeContactedPa")
                        .HasColumnName("PhoneSomeoneWhoCanBeContacted_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirthPa")
                        .HasColumnName("PlaceOfBirth_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenewalInternetBankingPa")
                        .HasColumnName("RenewalInternetBanking_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SalaryPa")
                        .HasColumnName("Salary_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SocialStatusPa")
                        .HasColumnName("SocialStatus_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SomeoneWhoCanBeContactedPa")
                        .HasColumnName("SomeoneWhoCanBeContacted_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateOfWorkPa")
                        .HasColumnName("StartDateOfWork_PA")
                        .HasColumnType("date");

                    b.Property<string>("TheAddressOfTheOrganizationPa")
                        .HasColumnName("TheAddressOfTheOrganization_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TheExpiryDateOfThePassportPa")
                        .HasColumnName("TheExpiryDateOfThePassport_PA")
                        .HasColumnType("date");

                    b.Property<string>("TheNamePrintedOnTheMasterCardPa")
                        .HasColumnName("TheNamePrintedOnTheMasterCard_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheNamesOfBanksPa")
                        .HasColumnName("TheNamesOfBanks_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheNearestPointPa")
                        .HasColumnName("TheNearestPoint_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheWorkPa")
                        .HasColumnName("TheWork_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAnotherCurrencyPa")
                        .HasColumnName("TypeAnotherCurrency_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOtherNationalityPa")
                        .HasColumnName("TypeOtherNationality_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsdollarPa")
                        .HasColumnName("USDollar_PA")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WhyTheAccountIsNotManagedByTheBeneficiaryPa")
                        .HasColumnName("WhyTheAccountIsNotManagedByTheBeneficiary_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WifeNamePa")
                        .HasColumnName("WifeName_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WitnessPa")
                        .HasColumnName("witness_PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkIdnumberPa")
                        .HasColumnName("WorkIDNumber_PA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPa");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PersonalAccounts");
                });

            modelBuilder.Entity("Backend.Models.SmsVerificationCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsetedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<int>("PersonalAccountIdPa")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerivicationCodeExpireOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SmsVerificationCodes");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BussinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CurrentTmweelEndingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnTmweel")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Backend.Models.AskBank", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("AskBanks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.Bill", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.BillT", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.InsuranceDoc", b =>
                {
                    b.HasOne("Backend.Models.Bill", "Bill")
                        .WithOne("InsuranceDoc")
                        .HasForeignKey("Backend.Models.InsuranceDoc", "BillId");
                });

            modelBuilder.Entity("Backend.Models.InsuranceTimeToPay", b =>
                {
                    b.HasOne("Backend.Models.Bill", "Bill")
                        .WithOne("InsuranceTimeToPay")
                        .HasForeignKey("Backend.Models.InsuranceTimeToPay", "BillId");
                });

            modelBuilder.Entity("Backend.Models.NotPayAlarm", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.NotPayMonth", b =>
                {
                    b.HasOne("Backend.Models.NotPayAlarm", "NotPayAlarm")
                        .WithMany("NotPayMonths")
                        .HasForeignKey("NotPayAlarmId");
                });

            modelBuilder.Entity("Backend.Models.PartialPay", b =>
                {
                    b.HasOne("Backend.Models.Bill", null)
                        .WithMany("PartialPay")
                        .HasForeignKey("BillId");
                });

            modelBuilder.Entity("Backend.Models.PersonalAccount", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithOne("PersonalAccount")
                        .HasForeignKey("Backend.Models.PersonalAccount", "UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
